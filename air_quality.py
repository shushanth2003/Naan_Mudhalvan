# -*- coding: utf-8 -*-
"""ADS_Phase5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uqFhibRB80AcyI3sPmwTalww1gklBeLH
"""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming your data is in a CSV file
data = pd.read_csv('/content/cpcb_dly_aq_tamil_nadu-2014 (1).csv')

# Display basic statistics
print(data.describe())

# Check for missing values
print(data.isnull().sum())

# Check unique values in categorical columns
print(data['State'].unique())
print(data['City/Town/Village/Area'].unique())
# ... Repeat for other categorical columns

import matplotlib.pyplot as plt
# Plot a line chart for RSPM/PM10 levels over time
plt.figure(figsize=(22,12))
plt.plot(data.index, data['RSPM/PM10'], marker='o', linestyle='-', color='b', label='RSPM/PM10')
plt.xlabel('Date')
plt.ylabel('RSPM/PM10 Levels')
plt.title('Trends in RSPM/PM10 Pollution Levels Over Time')
plt.grid(True)
plt.legend()
plt.show()

# Group data by date and calculate mean values
daily_mean = data.groupby('Sampling Date').mean()

# Plot daily average air quality
plt.figure(figsize=(12, 6))
plt.plot(daily_mean.index, daily_mean['SO2'], label='Mean SO2')
plt.plot(daily_mean.index, daily_mean['NO2'], label='Mean NO2')
plt.plot(daily_mean.index, daily_mean['RSPM/PM10'], label='Mean RSPM/PM10')
plt.xlabel('Sampling Date')
plt.ylabel('Mean Concentration')
plt.title('Daily Average Air Quality in Tamil Nadu')
plt.legend()
plt.grid(True)
plt.show()

# Calculate daily average SO2 and NO2 concentrations for all monitoring stations
daily_mean = data.groupby('Sampling Date')[['SO2', 'NO2']].mean()

# Plot daily average SO2 and NO2 concentrations
plt.figure(figsize=(12, 6))
plt.plot(daily_mean.index, daily_mean['SO2'], label='Mean SO2 Concentration')
plt.plot(daily_mean.index, daily_mean['NO2'], label='Mean NO2 Concentration')
plt.xlabel('Sampling Date')
plt.ylabel('Mean Concentration (µg/m³)')  # Units may vary based on your data
plt.title('Daily Average SO2 and NO2 Concentrations in Tamil Nadu')
plt.legend()
plt.grid(True)
plt.show()

# Summary statistics
so2_stats = data['SO2'].describe()
no2_stats = data['NO2'].describe()

# Box plots to visualize the distribution and identify outliers
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
data.boxplot(column='SO2')
plt.title('SO2 Concentration Box Plot')

plt.subplot(1, 2, 2)
data.boxplot(column='NO2')
plt.title('NO2 Concentration Box Plot')

plt.tight_layout()
plt.show()

# Summary statistics
rspm_pm10_stats = data['RSPM/PM10'].describe()

# Box plot to visualize the distribution and identify outliers
plt.figure(figsize=(6, 6))
data.boxplot(column='RSPM/PM10')
plt.title('RSPM/PM10 Concentration Box Plot')
plt.ylabel('Concentration (µg/m³)')  # Units may vary based on your data
plt.grid(True)
plt.show()

import seaborn as sns

# Preprocess the data
# - Convert the 'Sampling Date' column to datetime format
data['Sampling Date'] = pd.to_datetime(data['Sampling Date'])
# - Filter data for Tamil Nadu
tn_data = data[data['State'] == 'Tamil Nadu']

# Visualize trends in air pollution over time
plt.figure(figsize=(12, 6))

# Plot time series of SO2, NO2, and RSPM/PM10 concentrations
for pollutant in ['SO2', 'NO2', 'RSPM/PM10']:
    sns.lineplot(data=tn_data, x='Sampling Date', y=pollutant, label=pollutant)

plt.xlabel('Year')
plt.ylabel('Concentration (µg/m³)')
plt.title('Air Pollution Trends in Tamil Nadu')
plt.legend()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

avg_so2_no2_by_location = data.groupby('City/Town/Village/Area')[['SO2', 'NO2']].mean().reset_index()

# Create a bar chart for average SO2 levels by location
plt.figure(figsize=(12, 6))
plt.bar(avg_so2_no2_by_location['City/Town/Village/Area'], avg_so2_no2_by_location['SO2'], label='Average SO2 Levels', alpha=0.7, color='b')

# Create a bar chart for average NO2 levels by location
plt.bar(avg_so2_no2_by_location['City/Town/Village/Area'], avg_so2_no2_by_location['NO2'], label='Average NO2 Levels', alpha=0.7, color='b')

plt.xlabel('Location')
plt.ylabel('Average Levels')
plt.title('Average SO2 and NO2 Levels by Location')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.legend()
plt.tight_layout()
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Preprocess the data and select relevant columns
data['Sampling Date'] = pd.to_datetime(data['Sampling Date'])
tn_data = data[data['State'] == 'Tamil Nadu']
selected_columns = ['SO2', 'NO2', 'RSPM/PM10']
tn_data = tn_data[selected_columns].dropna()  # Remove rows with missing values

# Split the data into training and testing sets
X = tn_data[['SO2', 'NO2']]
y = tn_data['RSPM/PM10']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared (Coefficient of Determination): {r2}')

# Plot the predicted vs. actual values
plt.figure(figsize=(8, 8))
plt.scatter(y_test, y_pred)
plt.xlabel('Actual RSPM/PM10 Levels')
plt.ylabel('Predicted RSPM/PM10 Levels')
plt.title('Actual vs. Predicted RSPM/PM10 Levels')
plt.grid(True)
plt.show()

!pip install folium geopandas

!pip install gmaps

import geopandas as gpd
import matplotlib.pyplot as plt
import pandas as pd

# Load geographic boundary data for Tamil Nadu (replace 'tamil_nadu_location.shp' with the actual file path)
tamil_nadu_boundary = gpd.read_file('/content/tamil_nadu_location.shp', encoding='utf-8')


# Merge your data with the Tamil Nadu boundary data based on a common identifier (e.g., location name)
merged_data = tamil_nadu_boundary.merge(data, left_on='NAME', right_on='City/Town/Village/Area', how='right')

# Create a map with the Tamil Nadu boundary data
ax = tamil_nadu_boundary.plot(figsize=(12, 8), color='lightgray', edgecolor='white')

# Plot the locations and values on the map
merged_data.plot(ax=ax, markersize=merged_data['SO2'], alpha=0.1, legend=True, cmap='gist_heat', label = "SO2")
merged_data.plot(ax=ax, markersize=merged_data['NO2'], alpha=0.2, legend=True, cmap='winter', label = "NO2")

# Add place names as labels to the points on the map
for x, y, label in zip(merged_data.geometry.x, merged_data.geometry.y, merged_data['City/Town/Village/Area']):
   if not pd.isna(x) and not pd.isna(y):
        plt.annotate(label, (x, y), fontsize=10, ha='center', va='bottom')


plt.title('Average of SO2 and NO2 Values in Tamil Nadu')
ax.legend()
plt.show()

import pandas as pd
from sklearn.linear_model import LinearRegression

# Load your air quality data into a Pandas DataFrame
data = pd.read_csv('/content/cpcb_dly_aq_tamil_nadu-2014 (1).csv')

# Preprocess the data and select relevant columns
data['Sampling Date'] = pd.to_datetime(data['Sampling Date'])
tn_data = data[data['State'] == 'Tamil Nadu']
selected_columns = ['SO2', 'NO2', 'RSPM/PM10']
tn_data = tn_data[selected_columns].dropna()  # Remove rows with missing values

# Separate the features (SO2 and NO2) from the target (RSPM/PM10)
X = tn_data[['SO2', 'NO2']]
y = tn_data['RSPM/PM10']

# Create and train a linear regression model
model = LinearRegression()
model.fit(X, y)

# Now, you can use the trained model to make predictions for new data
# Replace 'new_data' with the values of SO2 and NO2 you want to predict RSPM/PM10 for
new_data = [[100, 200]]  # Example values for SO2 and NO2
predicted_rspm_pm10 = model.predict(new_data)

print(f'Predicted RSPM/PM10: {predicted_rspm_pm10[0]} µg/m³')

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load your air quality dataset
# Replace 'your_dataset.csv' with the actual file path
df = pd.read_csv('/content/cpcb_dly_aq_tamil_nadu-2014 (1).csv')

# Select the relevant columns for the heatmap (e.g., pollutant levels by location and time)
# Replace 'Pollutant', 'Location', and 'Time' with your column names
data = df.pivot_table(index='Location of Monitoring Station', values='RSPM/PM10')

# Create a heatmap
plt.figure(figsize=(12, 8))  # Adjust the figure size as needed
sns.heatmap(data, cmap='YlGnBu', annot=True, fmt=".1f")

# Customize the heatmap labels and title
plt.xlabel('Time')
plt.ylabel('Location')
plt.title('Air Quality Heatmap')

# Display the heatmap
plt.show()

import pandas as pd

# Load your CSV dataset into a DataFrame
data = pd.read_csv('/content/cpcb_dly_aq_tamil_nadu-2014 (1).csv')

# Group the data by the 'Region' column and calculate the mean for each group
grouped = data.groupby('City/Town/Village/Area')[['SO2', 'NO2', 'RSPM/PM10']].mean()

# Display the calculated averages
print(grouped)

import pandas as pd

# Load your CSV dataset into a DataFrame
data = pd.read_csv('/content/cpcb_dly_aq_tamil_nadu-2014 (1).csv')

# Group the data by the 'Region' column and calculate the mean for each group
grouped = data.groupby('Location of Monitoring Station')[['SO2', 'NO2', 'RSPM/PM10']].mean()

# Display the calculated averages
print(grouped)

import pandas as pd

# Load your CSV dataset into a DataFrame
data = pd.read_csv('/content/cpcb_dly_aq_tamil_nadu-2014 (1).csv')

# Calculate the average pollution level for each area
data['Average_Pollution'] = data[['SO2', 'NO2', 'RSPM/PM10']].mean(axis=1)

# Sort the areas in increasing order of average pollution levels
sorted_data = data.sort_values(by='Average_Pollution',ascending = False)

# Display the sorted DataFrame
print(sorted_data[['City/Town/Village/Area', 'Average_Pollution']])